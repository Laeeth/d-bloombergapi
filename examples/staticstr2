 APIFLDS_SVC = "//blp/apiflds";
"ApplicationAuthenticationType=APPNAME_AND_KEY;"
"ApplicationAuthenticationType=APPNAME_AND_KEY;ApplicationName=";
"ApplicationName=");
AUTH_APP_PREFIX= "AuthenticationMode=APPLICATION_ONLY;ApplicationAuthenticationType=APPNAME_AND_KEY;ApplicationName=";
 AUTH_APP_PREFIX = "AuthenticationMode=APPLICATION_ONLY;ApplicationAuthenticationType=APPNAME_AND_KEY;ApplicationName=";
AUTH_APP_PREFIX= "AuthenticationMode=APPLICATION_ONLY;ApplicationAuthenticationType=APPNAME_AND_KEY;ApplicationName=";
AUTH_DIR_PREFIX= "AuthenticationType=DIRECTORY_SERVICE;DirSvcPropertyName=";
 AUTH_DIR_PREFIX = "AuthenticationType=DIRECTORY_SERVICE;DirSvcPropertyName=";
AUTH_DIR_PREFIX= "AuthenticationType=DIRECTORY_SERVICE;DirSvcPropertyName=";
"AuthenticationMode=APPLICATION_ONLY;"
"AuthenticationMode=USER_AND_APPLICATION;"
"AuthenticationMode=USER_AND_APPLICATION;AuthenticationType=OS_LOGON;"
"AuthenticationType=DIRECTORY_SERVICE;"
"AuthenticationType=DIRECTORY_SERVICE;DirSvcPropertyName=";
"AuthenticationType=OS_LOGON;"
AUTH_OPTION_APP= "app=";
AUTH_OPTION_APP= "app=";
AUTH_OPTION_DIR= "dir=";
AUTH_OPTION_DIR= "dir=";
AUTH_OPTION_NONE = "none";
AUTH_OPTION_NONE = "none";
AUTH_OPTION_USER = "user";
AUTH_OPTION_USER = "user";
 AUTH_USER_APP_PREFIX = "AuthenticationMode=USER_AND_APPLICATION;AuthenticationType=OS_LOGON;ApplicationAuthenticationType=APPNAME_AND_KEY;ApplicationName=";
AUTH_USER= "AuthenticationType=OS_LOGON";
 AUTH_USER = "AuthenticationType=OS_LOGON";
AUTH_USER= "AuthenticationType=OS_LOGON";
bytesAUTHORIZATION_FAILURE("AuthorizationFailure");
bytesAUTHORIZATION_FAILURE("AuthorizationFailure");
bytesAUTHORIZATION_SUCCESS("AuthorizationSuccess");
bytesAUTHORIZATION_SUCCESS("AuthorizationSuccess");
bytesBAR_DATA("barData");
bytesBAR_TICK_DATA("barTickData");
bytesBBGID_ELEMENT("bbgid");
bytesCATEGORY("category");
bytesCATEGORY("category");
bytesCATEGORY_ELEMENT("category");
bytesCATEGORY_ID("categoryId");
bytesCATEGORY_NAME("categoryName");
bytesCLOSE("close");
bytesCOND_CODE("conditionCodes");
bytesCOUNTRY_ELEMENT("country");
bytesCURRENCY_ELEMENT("currency");
bytesCURVEID_ELEMENT("curveid");
bytesCURVE_LIST_REQUEST("curveListRequest");
bytesCURVE_LIST_RESPONSE("CurveListResponse");
bytesDESCRIPTION_ELEMENT("description");
bytesEID_DATA("eidData");
bytesEID_DATA("eidData");
bytesEID("EID");
bytesERROR_INFO("errorInfo");
bytesERROR_INFO("errorInfo");
bytesERROR_RESPONSE("ErrorResponse");
bytesFIELD_DATA("fieldData");
bytesFIELD_DATA("fieldData");
bytesFIELD_DESC("description");
bytesFIELD_ERROR("fieldError");
bytesFIELD_EXCEPTIONS("fieldExceptions");
bytesFIELD_EXCEPTIONS("fieldExceptions");
bytesFIELD_ID("fieldId");
bytesFIELD_ID("fieldId");
bytesFIELD_ID("id");
	bytesFIELD_ID("id");
bytesFIELD_INFO("fieldInfo");
bytesFIELD_MNEMONIC("mnemonic");
bytesFIELD_MSG("message");
bytesFIELD_SEARCH_ERROR("fieldSearchError");
bytesGOVT_LIST_REQUEST("govtListRequest");
bytesGOVT_LIST_RESPONSE("GovtListResponse");
bytesHIGH("high");
bytesINSTRUMENT_LIST_REQUEST("instrumentListRequest");
bytesINSTRUMENT_LIST_RESPONSE("InstrumentListResponse");
bytesLAST_PRICE("LAST_PRICE");
bytesLOW("low");
bytesMAX_RESULTS_ELEMENT("maxResults");
bytesMESSAGE_ELEMENT("message");
bytesMESSAGE("message");
bytesMESSAGE("message");
bytesNAME_ELEMENT("name");
bytesNUM_EVENTS("numEvents");
bytesOPEN("open");
bytesPARSEKY_ELEMENT("parseky");
bytesPARTIAL_MATCH_ELEMENT("partialMatch");
bytesPUBLISHER_ELEMENT("publisher");
bytesQUERY_ELEMENT("query");
bytesREASON("reason");
bytesRESPONSE_ERROR("responseError");
bytesRESPONSE_ERROR("responseError");
bytesRESPONSE_ERROR("responseError");
bytesRESULTS_ELEMENT("results");
bytesSECURITY_DATA("securityData");
bytesSECURITY_DATA("securityData");
bytesSECURITY_DATA("securityData");
bytesSECURITY_ELEMENT("security");
bytesSECURITY_ERROR("securityError");
bytesSECURITY("security");
bytesSECURITY("security");
bytesSECURITY("security");
bytesSESSION_STARTUP_FAILURE("SessionStartupFailure");
bytesSESSION_STARTUP_FAILURE("SessionStartupFailure");
bytesSESSION_TERMINATED("SessionTerminated");
bytesSESSION_TERMINATED("SessionTerminated");
bytesSUBTYPE_ELEMENT("subtype");
bytesTICK_DATA("tickData");
bytesTICKER_ELEMENT("ticker");
bytesTICK_SIZE("size");
bytesTIME("time");
bytesTOKEN_ELEMENT("token");
bytesTOKEN_FAILURE("TokenGenerationFailure");
bytesTOKEN_FAILURE("TokenGenerationFailure");
bytesTOKEN_SUCCESS("TokenGenerationSuccess");
bytesTOKEN_SUCCESS("TokenGenerationSuccess");
bytesTYPE_ELEMENT("type");
bytesTYPE("type");
bytesVALUE("value");
bytesVOLUME("volume");
DEFAULT_PARTIAL_MATCH(false);
APIAUTH_SVC= "//blp/apiauth";
APIAUTH_SVC= "//blp/apiauth";
APIAUTH_SVC = "//blp/apiauth";
AUTH_OPTION_APP("app=");
AUTH_OPTION_APP = "app=";
AUTH_OPTION_DIR("dir=");
AUTH_OPTION_DIR = "dir=";
AUTH_OPTION_NONE("none");
AUTH_OPTION_NONE= "none";
AUTH_OPTION_USER_APP("userapp=");
AUTH_OPTION_USER_APP= "userapp=";
AUTH_OPTION_USER("user");
AUTH_OPTION_USER= "user";
AUTH_SERVICE("//blp/apiauth");
DEFAULT_HOST("localhost");
DEFAULT_QUERY_STRING("IBM");
INSTRUMENTS_SERVICE("//blp/instruments");
MKTDATA_SVC = "//blp/mktdata";
REFDATA_SVC= "//blp/refdata";
REFDATA_SVC= "//blp/refdata";
REFRENCEDATA_REQUEST = "ReferenceDataRequest";
REFRENCEDATA_REQUEST = "ReferenceDataRequest";
const int DEFAULT_MAX_RESULTS(10);
const int DEFAULT_PORT(8194);
AUTH_APP_PREFIX = "AuthenticationMode=APPLICATION_ONLY;"
AUTH_APP_PREFIX = "AuthenticationMode=APPLICATION_ONLY;ApplicationAuthenticationType=APPNAME_AND_KEY;ApplicationName=";
AUTH_DIR_PREFIX = "AuthenticationType=DIRECTORY_SERVICE;DirSvcPropertyName=";
AUTH_USER_APP_PREFIX = "AuthenticationMode=USER_AND_APPLICATION;AuthenticationType=OS_LOGON;ApplicationAuthenticationType=APPNAME_AND_KEY;ApplicationName=";
AUTH_USER("AuthenticationType=OS_LOGON");
AUTH_USER = "AuthenticationType=OS_LOGON";
AUTH_APP_PREFIX = "AuthenticationMode=APPLICATION_ONLY;ApplicationAuthenticationType=APPNAME_AND_KEY;ApplicationName=";
AUTH_DIR_PREFIX = "AuthenticationType=DIRECTORY_SERVICE;DirSvcPropertyName=";
AUTH_USER = "AuthenticationType=OS_LOGON";
"DirSvcPropertyName=");
AUTHORIZATION_SUCCESS("AuthorizationSuccess");
DATA_LOSS("DataLoss");
MARKET_DATA("MarketData");
PERMISSION_REQUEST("PermissionRequest");
RESOLUTION_SUCCESS("ResolutionSuccess");
SESSION_TERMINATED("SessionTerminated");
SLOW_CONSUMER_WARNING_CLEARED("SlowConsumerWarningCleared");
SLOW_CONSUMER_WARNING("SlowConsumerWarning");
SOURCE("source");
SUBSCRIPTION_TERMINATED("SubscriptionTerminated");
TOKEN_FAILURE("TokenGenerationFailure");
TOKEN_SUCCESS("TokenGenerationSuccess");
TOKEN("token");
TOPIC_CREATED("TopicCreated");
TOPIC_RECAP("TopicRecap");
TOPICS("topics");
TOPIC_SUBSCRIBED("TopicSubscribed");
TOPIC_UNSUBSCRIBED("TopicUnsubscribed");
static std::string PADDING = "";
